/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 09 02:58:25 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import net.mooctest.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(integer0, node0, node0, node0);
      assertTrue(node0.isLeaf());
      
      node0.right = node1;
      node0.right.right = node1;
      node1.left.parent = node0;
      boolean boolean0 = node0.right.equals(node0.right.left.parent);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      node0.value = integer0;
      Integer integer1 = new Integer((-333));
      node0.value = integer1;
      node0.hashCode();
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(integer0, node0, node0, node0);
      assertTrue(node0.isLeaf());
      
      node0.right = node1;
      node0.right.left.parent = node0.right;
      boolean boolean0 = node0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(integer0, node0, node0, node0);
      assertTrue(node0.isLeaf());
      
      node0.right = node1;
      node0.value = integer0;
      Integer integer1 = new Integer((-333));
      node0.value = integer1;
      node0.right.right = node1;
      boolean boolean0 = node0.equals(node0.right.right);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node((Integer) null, (Node) null, (Node) null, (Node) null);
      Integer integer0 = new Integer((-15));
      Node node1 = new Node(integer0, node0, node0, (Node) null);
      boolean boolean0 = node0.equals(node1);
      assertFalse(boolean0);
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node((Integer) null, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node((Integer) null, node0, (Node) null, (Node) null);
      boolean boolean0 = node0.equals(node1);
      assertTrue(boolean0);
      assertTrue(node1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(integer0, node0, node0, node0);
      assertTrue(node0.isLeaf());
      
      node0.right = node1;
      boolean boolean0 = node0.right.equals(node0.right.parent.value);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(integer0, node0, node0, node0);
      assertTrue(node0.isLeaf());
      
      node0.right = node1;
      node0.right.left.parent = node0.right;
      boolean boolean0 = node0.right.equals(node0.right.left.parent);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      boolean boolean0 = node0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node((Integer) null, (Node) null, (Node) null, (Node) null);
      node0.hashCode();
      assertTrue(node0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      assertTrue(node0.isLeaf());
      
      node0.right = node0;
      boolean boolean0 = node0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      boolean boolean0 = node0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-2227));
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(integer0, node0, node0, (Node) null);
      boolean boolean0 = node1.isLeaf();
      assertFalse(boolean0);
      assertTrue(node0.isLeaf());
  }
}
