/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 09 02:59:28 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.Node;
import net.mooctest.RedBlackTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RedBlackTree_ESTest extends RedBlackTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insert(0);
      RedBlackTree redBlackTree1 = new RedBlackTree();
      Node node0 = redBlackTree1.createNode((-759), redBlackTree0.root, redBlackTree0.root, redBlackTree0.root);
      redBlackTree1.size = 2449;
      Node node1 = redBlackTree1.getSuccessor(redBlackTree0.root);
      node1.value = node0.value;
      node0.parent = redBlackTree0.root;
      node1.left = redBlackTree0.root;
      node0.parent = node1;
      redBlackTree0.rotateRight(node1);
      redBlackTree1.delete(node1);
      String string0 = "ty1$}FBj\\";
      // Undeclared exception!
      try { 
        RedBlackTree.ColorEnum.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.RedBlackTree.ColorEnum.ty1$}FBj\\
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insert(0);
      RedBlackTree redBlackTree1 = new RedBlackTree();
      Node node0 = redBlackTree1.createNode((-759), redBlackTree0.root, redBlackTree0.root, redBlackTree0.root);
      redBlackTree1.size = 2449;
      Node node1 = redBlackTree1.getSuccessor(redBlackTree0.root);
      node1.value = node0.value;
      node0.parent = redBlackTree0.root;
      node0.parent.left = null;
      node1.left = redBlackTree0.root;
      node0.parent = node1;
      Node node2 = redBlackTree0.rotateRight(node1);
      Node node3 = redBlackTree1.delete(node1);
      redBlackTree0.rotateRight(node0);
      RedBlackTree redBlackTree2 = new RedBlackTree();
      Node node4 = redBlackTree2.rotateLeft(node2);
      node4.value = node1.value;
      node4.left = node0.parent.left;
      node4.parent = node0.parent.left;
      node4.left = node3;
      redBlackTree0.getMinimum(node4);
      node4.parent = node1;
      RedBlackTree.ColorEnum.values();
      // Undeclared exception!
      try { 
        redBlackTree0.printSubtree(node4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insert(0);
      RedBlackTree redBlackTree1 = new RedBlackTree();
      Node node0 = redBlackTree1.createNode((-759), redBlackTree0.root, redBlackTree0.root, redBlackTree0.root);
      redBlackTree1.size = 2449;
      Node node1 = redBlackTree1.getSuccessor(redBlackTree0.root);
      node1.value = node0.value;
      node0.parent = redBlackTree0.root;
      node0.parent.left = null;
      node1.left = redBlackTree0.root;
      node0.parent = node1;
      redBlackTree0.rotateRight(node1);
      redBlackTree1.delete(node1);
      String string0 = "ty1$}FBj\\";
      // Undeclared exception!
      try { 
        RedBlackTree.ColorEnum.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.RedBlackTree.ColorEnum.ty1$}FBj\\
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer((-1));
      Node node0 = redBlackTree0.insert((-2270));
      Node node1 = redBlackTree0.delete(node0);
      Node node2 = new Node(integer0, redBlackTree0.root, node0, node1);
      node0.parent = redBlackTree0.root;
      redBlackTree0.rotateRight(node2);
      node0.parent = node2;
      redBlackTree0.getMinimum(node0);
      redBlackTree0.rotateLeft(node0);
      // Undeclared exception!
      redBlackTree0.getMinimum(node0.parent);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.insert(203);
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      redBlackTree0.rotateLeft(redBlackTree_RedBlackNode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode1 = (RedBlackTree.RedBlackNode)redBlackTree0.getSuccessor((Node) redBlackTree_RedBlackNode0);
      redBlackTree_RedBlackNode0.parent = (Node) redBlackTree_RedBlackNode1;
      redBlackTree_RedBlackNode0.parent = (Node) redBlackTree_RedBlackNode1;
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.RED;
      redBlackTree_RedBlackNode1.color = redBlackTree_ColorEnum0;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode2 = (RedBlackTree.RedBlackNode)redBlackTree0.rotateRight(redBlackTree_RedBlackNode1);
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode3 = (RedBlackTree.RedBlackNode)redBlackTree0.createNode(0, redBlackTree_RedBlackNode2, redBlackTree_RedBlackNode2, redBlackTree_RedBlackNode0);
      RedBlackTree.ColorEnum.values();
      redBlackTree_RedBlackNode1.left = (Node) redBlackTree_RedBlackNode3;
      // Undeclared exception!
      try { 
        redBlackTree0.rotateLeft(redBlackTree_RedBlackNode0.parent);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = redBlackTree0.insert(203);
      Node node1 = redBlackTree0.getMinimum(node0);
      node1.parent = node0;
      Node node2 = redBlackTree0.rotateLeft(node1);
      redBlackTree0.rotateLeft(node2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RedBlackTree.ColorEnum.values();
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = 229;
      int int1 = 28;
      Node node0 = redBlackTree0.insert(int0);
      Node node1 = redBlackTree0.createNode(int0, node0, node0, node0);
      Node node2 = new Node(node1.value, redBlackTree0.root, node1, node0);
      Node node3 = redBlackTree0.rotateRight(node2);
      node1.parent = node3;
      node3.right = node2;
      // Undeclared exception!
      redBlackTree0.insert(int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = redBlackTree0.insert((-683));
      RedBlackTree.ColorEnum.values();
      node0.value = null;
      Node node1 = redBlackTree0.getMaximum(node0);
      Node node2 = redBlackTree0.createNode((-1), node0, node1, node0);
      node1.parent = node0;
      node1.parent = redBlackTree0.root;
      node1.value = node2.value;
      node0.value = node1.value;
      Node node3 = redBlackTree0.delete(node0);
      Node node4 = redBlackTree0.getMinimum(node3);
      Node node5 = redBlackTree0.getMinimum(node1);
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      node5.value = integer0;
      node2.parent = node0;
      redBlackTree0.getMinimum(node1);
      redBlackTree0.getMinimum(node5);
      Node node6 = redBlackTree0.getMinimum(node4);
      redBlackTree0.rotateRight(node6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = 0;
      redBlackTree0.size = 0;
      Node node0 = redBlackTree0.insert(0);
      int int1 = 1;
      node0.right = redBlackTree0.root;
      // Undeclared exception!
      redBlackTree0.insert(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      Node node0 = redBlackTree0.rotateRight(redBlackTree_RedBlackNode0);
      // Undeclared exception!
      redBlackTree0.getMinimum(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer(0);
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.RED;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, (Node) null, (Node) null, (Node) null, redBlackTree_ColorEnum0);
      redBlackTree0.createNode(0, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer(0);
      redBlackTree0.printTreePreOrder();
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      node0.left = null;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      Node node1 = redBlackTree0.createNode((-1840), node0, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode0);
      Node node2 = redBlackTree0.getMinimum(node1);
      redBlackTree0.rotateLeft(node2);
      RedBlackTree.ColorEnum.values();
      Node node3 = null;
      // Undeclared exception!
      try { 
        redBlackTree0.rotateRight((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree redBlackTree1 = new RedBlackTree();
      redBlackTree0.root = null;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      redBlackTree0.delete((Node) redBlackTree_RedBlackNode0);
      Node node0 = redBlackTree1.createNode((-161), (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        redBlackTree0.rotateLeft(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RedBlackTree.ColorEnum.values();
      RedBlackTree.ColorEnum.values();
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = redBlackTree0.insert(0);
      Node node1 = redBlackTree0.getMinimum(node0);
      node1.right = redBlackTree0.root;
      node1.right = redBlackTree0.root;
      Node node2 = redBlackTree0.rotateLeft(node1);
      node1.right.right = node0;
      node0.right = redBlackTree0.root;
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      node2.left = node1.right.right;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode((Integer) null, node1.right, node1, node2, redBlackTree_ColorEnum0);
      node2.right = (Node) redBlackTree_RedBlackNode0;
      node1.right.value = null;
      node2.right = node0;
      redBlackTree0.createNode((int) node1.right.value, node2, node2, node1.right);
      redBlackTree0.rotateRight(node1);
      node2.right.left = redBlackTree0.root;
      node2.right.left = redBlackTree0.root;
      redBlackTree0.rotateRight(node1.right.right);
      node2.right.left = node2.right.left;
      node2.right.left = node1.right.right;
      redBlackTree_RedBlackNode0.parent = node1.right;
      // Undeclared exception!
      redBlackTree0.delete(node2.right);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      Node node0 = redBlackTree0.createNode(0, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode0);
      redBlackTree0.rotateRight(node0);
      // Undeclared exception!
      try { 
        RedBlackTree.ColorEnum.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.RedBlackTree.ColorEnum.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = 31;
      Node node0 = null;
      Node node1 = redBlackTree0.createNode(31, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        redBlackTree0.delete(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = Integer.getInteger("$VALUES", 0);
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, (Node) null, (Node) null, (Node) null, redBlackTree_ColorEnum0);
      // Undeclared exception!
      try { 
        redBlackTree0.delete((Node) redBlackTree_RedBlackNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = (-658);
      int int1 = 0;
      Integer integer0 = new Integer(0);
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      Node node0 = new Node(integer0, (Node) null, (Node) null, redBlackTree_RedBlackNode0);
      // Undeclared exception!
      try { 
        redBlackTree0.delete(node0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.mooctest.Node cannot be cast to net.mooctest.RedBlackTree$RedBlackNode
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      redBlackTree0.getMaximum((Node) redBlackTree_RedBlackNode0);
      Node node0 = redBlackTree0.getMinimum((Node) redBlackTree_RedBlackNode0);
      Integer integer0 = new Integer((int) node0.value);
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode1 = new RedBlackTree.RedBlackNode(integer0, redBlackTree0.root, node0, redBlackTree_RedBlackNode0, redBlackTree_ColorEnum0);
      // Undeclared exception!
      try { 
        redBlackTree0.rotateLeft(redBlackTree_RedBlackNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer(0);
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, (Node) null, (Node) null, (Node) null, redBlackTree_ColorEnum0);
      // Undeclared exception!
      try { 
        redBlackTree0.getMaximum((Node) redBlackTree_RedBlackNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer((-1345));
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        redBlackTree0.getMinimum(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = redBlackTree0.insert(0);
      node0.left = redBlackTree0.root;
      redBlackTree0.delete(node0);
      redBlackTree0.insert(0);
      Node node1 = null;
      // Undeclared exception!
      try { 
        redBlackTree0.rotateRight(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree redBlackTree1 = new RedBlackTree();
      redBlackTree0.delete((Node) null);
      Node node0 = redBlackTree1.insert(1347);
      redBlackTree0.getMaximum(node0);
      Integer integer0 = new Integer((-4846));
      // Undeclared exception!
      try { 
        redBlackTree1.getMaximum((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = null;
      // Undeclared exception!
      try { 
        redBlackTree0.getMinimum((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      // Undeclared exception!
      redBlackTree0.getSuccessor((Node) redBlackTree_RedBlackNode0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = (-1);
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode1 = new RedBlackTree.RedBlackNode((Integer) null, (Node) null, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode0, redBlackTree_ColorEnum0);
      // Undeclared exception!
      try { 
        redBlackTree0.delete((Node) redBlackTree_RedBlackNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = redBlackTree0.insert(0);
      Node node1 = redBlackTree0.getMaximum(node0);
      redBlackTree0.rotateRight(node0);
      Node node2 = redBlackTree0.getMaximum(node1);
      redBlackTree0.getMaximum(node2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.printTreeInOrder();
      Node node0 = redBlackTree0.insert(0);
      redBlackTree0.getMaximum(node0);
      redBlackTree0.getMinimum(node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = null;
      // Undeclared exception!
      try { 
        redBlackTree0.getMaximum((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.delete((-2151));
      redBlackTree0.createNode((-2151), (Node) null, (Node) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-891));
      Integer.remainderUnsigned((-891), (-891));
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Node node0 = redBlackTree0.insert(783);
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, node0, node0, node0, redBlackTree_ColorEnum0);
      redBlackTree_RedBlackNode0.right = redBlackTree0.root;
      RedBlackTree.ColorEnum redBlackTree_ColorEnum1 = RedBlackTree.ColorEnum.BLACK;
      redBlackTree_RedBlackNode0.right.left = redBlackTree0.root;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode1 = new RedBlackTree.RedBlackNode(integer0, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode0, redBlackTree0.root, redBlackTree_ColorEnum1);
      String string0 = "V.f9!+VgCZ3_-pN^9)";
      redBlackTree0.rotateLeft(redBlackTree_RedBlackNode0);
      Node node1 = new Node(redBlackTree_RedBlackNode0.value, redBlackTree0.root, redBlackTree_RedBlackNode1, redBlackTree_RedBlackNode0.right);
      // Undeclared exception!
      try { 
        redBlackTree0.printSubtree(node1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer2, (Node) null, (Node) null, (Node) null, redBlackTree_ColorEnum0);
      Node node0 = new Node(integer1, (Node) null, (Node) null, redBlackTree_RedBlackNode0);
      // Undeclared exception!
      try { 
        redBlackTree0.rotateLeft(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer(0);
      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
      // Undeclared exception!
      try { 
        redBlackTree0.rotateRight(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree redBlackTree1 = new RedBlackTree();
      Node node0 = redBlackTree1.insert(31);
      Node node1 = redBlackTree0.createNode((-1), node0, node0, redBlackTree1.root);
      redBlackTree0.createNode((int) node0.value, node1, node1, node1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.printTreePreOrder();
      Node node0 = redBlackTree0.root;
      RedBlackTree redBlackTree1 = new RedBlackTree();
      // Undeclared exception!
      try { 
        redBlackTree1.rotateLeft((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = 0;
      Node node0 = redBlackTree0.insert(0);
      node0.right = redBlackTree0.root;
      Node node1 = redBlackTree0.rotateLeft(node0);
      node1.parent = node0.right;
      node0.left = node1;
      node0.right.right = node1.parent;
      redBlackTree0.getMaximum(node1);
      Node node2 = redBlackTree0.delete(node1);
      node1.parent = redBlackTree0.root;
      node0.left.parent = redBlackTree0.root;
      node0.left.left = redBlackTree0.root;
      node1.value = node2.value;
      node1.value = node0.value;
      node0.right = redBlackTree0.root;
      redBlackTree0.rotateRight(node2);
      // Undeclared exception!
      redBlackTree0.insert((int) node0.value);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      Integer integer0 = new Integer((-1));
      Node node0 = redBlackTree0.insert((-2270));
      Node node1 = redBlackTree0.delete(node0);
      Node node2 = new Node(integer0, redBlackTree0.root, node0, node1);
      node0.parent = redBlackTree0.root;
      redBlackTree0.rotateRight(node2);
      redBlackTree0.getMinimum(node0);
      redBlackTree0.rotateLeft(node0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.size = 0;
      Integer integer0 = new Integer(0);
      Integer.getInteger("net.mooctest.RedBlackTree", integer0);
      redBlackTree0.printTreePreOrder();
      RedBlackTree.ColorEnum.values();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      RedBlackTree redBlackTree1 = new RedBlackTree();
      redBlackTree0.delete((Node) null);
      redBlackTree1.printTreeInOrder();
      Node node0 = redBlackTree1.insert((-645));
      Node node1 = redBlackTree1.insert((-645));
      redBlackTree0.delete(node0);
      Node node2 = redBlackTree1.getMaximum(redBlackTree0.root);
      Node node3 = redBlackTree0.insert((int) node0.value);
      RedBlackTree redBlackTree2 = new RedBlackTree();
      Node node4 = redBlackTree2.getMinimum(node3);
      node3.left = node1;
      redBlackTree2.rotateRight(node1);
      Node node5 = null;
      node4.right = node5;
      node2.parent = node1;
      Node node6 = redBlackTree0.createNode((int) node3.value, redBlackTree1.root, node4, node4);
      int int0 = (-4138);
      node4.value = node1.value;
      node6.parent = node3;
      redBlackTree1.insert(int0);
      redBlackTree0.rotateLeft(node6);
      redBlackTree1.delete(redBlackTree0.root);
      redBlackTree1.rotateLeft(redBlackTree0.root);
      RedBlackTree.ColorEnum.values();
      redBlackTree0.getMinimum(node0);
      // Undeclared exception!
      redBlackTree0.printTreeInOrder();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.printTreePreOrder();
      redBlackTree0.insert((-2642));
      redBlackTree0.delete(0);
      // Undeclared exception!
      try { 
        redBlackTree0.printTreeInOrder();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RedBlackTree.ColorEnum.values();
      RedBlackTree redBlackTree0 = new RedBlackTree();
      int int0 = 229;
      int int1 = 1;
      Node node0 = redBlackTree0.createNode(229, (Node) null, (Node) null, (Node) null);
      Node node1 = new Node(node0.value, (Node) null, node0, (Node) null);
      // Undeclared exception!
      try { 
        redBlackTree0.rotateRight(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RedBlackTree redBlackTree0 = new RedBlackTree();
      redBlackTree0.search(0);
      // Undeclared exception!
      try { 
        redBlackTree0.rotateLeft((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.RedBlackTree", e);
      }
  }
}
